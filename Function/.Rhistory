# Call ratio() with arguments 3 and 4
ratio(3, 4)
# Define ratio() function
ratio <- function(x, y) {
x / y
}
# Call ratio() with arguments 3 and 4
ratio(3, 4)
# Rewrite the call to follow best practices
mean(c(1:9, NA), trim = 0.1, na.rm = TRUE)
f <- function(x) {
y <- 5
x + y
}
f(5)
y
# Define example vector x
x <- c(1:10, NA)
# Use the function template to create the rescale01 function
rescale01 <- function(x) {
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
# Test your function, call rescale using the vector x as the argument
rescale01(x)
x <-  c(NA, NA, NA)
y1 <- c( 1, NA, NA)
y2 <- c( 1, NA, NA, NA)
# Call both_na on x, y1
both_na(x, y1)
both_na <- function(x, y) {
sum(is.na(x) & is.na(y))
}
# Define x, y1 and y2
x <-  c(NA, NA, NA)
y1 <- c( 1, NA, NA)
y2 <- c( 1, NA, NA, NA)
# Call both_na on x, y1
both_na(x, y1)
# Call both_na on x, y2
both_na(x, y2)
both_na <- function(x, y) {
sum(is.na(x) & is.na(y))
}
# Define x, y1 and y2
x <-  c(NA, NA, NA)
y1 <- c( 1, NA, NA)
y2 <- c( 1, NA, NA, NA)
# Call both_na on x, y1
both_na(x, y1)
# Call both_na on x, y2
both_na(x, y2)
f2 <- function(x) {
if (length(x) <= 1) return(NULL)
x[-length(x)]
}
x<-rep(1:4,each=2)
f2(x)
mean_ci <- function(x, level = 0.95) {
se <- sd(x) / sqrt(length(x))
alpha <- 1 - level
mean(x) + se * qnorm(c(alpha / 2, 1 - alpha / 2))
}
mean_ci(numeric(0))
mean_ci <- function(x, level = 0.95) {
if (length(x) == 0) {
warning("`x` was empty", call. = FALSE)
interval <- c(-Inf, Inf)
} else {
se <- sd(x) / sqrt(length(x))
alpha <- 1 - level
interval <- mean(x) +
se * qnorm(c(alpha / 2, 1 - alpha / 2))
}
interval
}
mean_ci(numeric(0))
# Alter the arguments to mean_ci
mean_ci <- function(x, level = 0.95) {
se <- sd(x) / sqrt(length(x))
alpha <- 1 - level
mean(x) + se * qnorm(c(alpha / 2, 1 - alpha / 2))
}
mean_ci(numeric(0))
mean_ci(0)
mean_ci <- function(x, level = 0.95) {
if (length(x) == 0) {
warning("`x` was empty", call. = FALSE)
interval <- c(-Inf, Inf)
} else {
se <- sd(x) / sqrt(length(x))
alpha <- 1 - level
interval <- mean(x) +
se * qnorm(c(alpha / 2, 1 - alpha / 2))
}
interval
}
mean_ci(numeric(0))
mean_ci(0)
x <- c(1, 2, NA, 4, 5)
f <- function(x, y) {
x[is.na(x)] <- y
cat(sum(is.na(x)), y, "\n")
x
}
# Call f() with the arguments x = x and y = 3
f(x = x, y = 3)
# Call f() with the arguments x = x and y = 10
f(x = x, y = 10)
replace_missings <- function(x, replacement) {
is_miss <- is.na(x)
x[is_miss] <- replacement
# Rewrite to use message()
message(sum(is_miss), " missings replaced by the value ", replacement)
x
}
# Check your new function by running on df$z
replace_missings(x, replacement = 3)
install.packages("purrr")
library(purrr)
# Find the mean of each column
map_dbl(planes, mean)
cyl<-split(mtcars, mtcars$cyl)
cyl
# Examine the structure of cyl
str(cyl)
# Extract the first element into four_cyls
four_cyls <- cyl[[1]]
# Fit a linear regression of mpg on wt using four_cyls
lm(mpg ~ wt, data = four_cyls)
map_dbl(cyl, function(df) mean(df$disp))
map(cyl, ~ lm(mpg ~ wt, data = .))
map(cyl, ~ lm(mpg ~ wt, data = .))
map(cyl, ~ mean(.$disp))
map(cyl, ~ lm(mpg ~ wt, data = .))
list(
list(a = 1, b = "A"),
list(a = 2, b = "C"),
list(a = 3, b = "D")
)
map(list_of_results, "a")
ist_of_results <- list(
list(a = 1, b = "A"),
list(a = 2, b = "C"),
list(a = 3, b = "D")
)
map(list_of_results, "a")
list_of_results <- list(
list(a = 1, b = "A"),
list(a = 2, b = "C"),
list(a = 3, b = "D")
)
map(list_of_results, "a")
coefs <- map(models, coef)
coefs
models=map(cyl, ~ lm(mpg ~ wt, data = .))
# Use map and coef to get the coefficients for each model: coefs
coefs <- map(models, coef)
coefs
names(models)
models=map(cyl, ~ lm(mpg ~ wt, data = .))
names(models)
models
# Use map and coef to get the coefficients for each model: coefs
coefs <- map(models, coef)
coefs
# Use string shortcut to extract the wt coefficient
map(coefs, "wt")
# use map_dbl with the numeric shortcut to pull out the second element
map_dbl(coefs, 2)
library(purrr)
models %>%
map(summary) %>%
map_dbl("r.squared")
# Define safe_readLines()
safe_readLines <- safely(readLines)
# Use the safe_readLines() function with map(): html
html <- map(urls, safe_readLines)
safe_readLines <- safely(readLines)
urls <- list(
example = "http://example.org",
rproj = "http://www.r-project.org",
asdf = "http://asdfasdasdkfjlda"
)
# Use the safe_readLines() function with map(): html
html <- map(urls, safe_readLines)
# Call str() on html
str(html)
# Extract the result from one of the successful elements
html[["example"]][["result"]]
# Extract the error from the element that was unsuccessful
html[["asdf"]][["error"]]
# Create a list n containing the values: 5, 10, and 20
n <- list(5, 10, 20)
# Call map() on n with rnorm() to simulate three samples
map(n, rnorm)
n <- list(5, 10, 20)
# Create a list mu containing the values: 1, 5, and 10
mu <- list(1, 5, 10)
# Edit to call map2() on n and mu with rnorm() to simulate three samples
map2(n, mu, rnorm)
n <- list(5, 10, 20)
mu <- list(1, 5, 10)
# Create a sd list with the values: 0.1, 1 and 0.1
sd <- list(0.1, 1, 0.1)
# Edit this call to pmap() to iterate over the sd list as well
pmap(list(n, mu, sd), rnorm)
f <- function(x) {
if (TRUE) {
return(x + 1)
}
x
}
f(2)
2==TRUE
y <- 10
f <- function(x) {
x + y
}
f(10)
# Our goal is to fit a separate linear regression of miles per gallon (mpg) against weight (wt) for each group of cars in our list of data frames, where each data frame in our list represents a different group. How should we get started?
cyl<- split(mtcars,mtcars$cyl)
str(cyl)
# Extract the first element into four_cyls
four_cyls <- cyl[[1]]
# Fit a linear regression of mpg on wt using four_cyls
lm(mpg ~ wt, data = four_cyls)
list_of_results <- list(
list(a = 1, b = "A"),
list(a = 2, b = "C"),
list(a = 3, b = "D")
)
n <- list(5, 10, 20)
# Create a list mu containing the values: 1, 5, and 10
mu <- list(1, 5, 10)
# Edit to call map2() on n and mu with rnorm() to simulate three samples
map2(n, mu, rnorm)
library(purrr)
n <- list(5, 10, 20)
# Create a list mu containing the values: 1, 5, and 10
mu <- list(1, 5, 10)
# Edit to call map2() on n and mu with rnorm() to simulate three samples
map2(n, mu, rnorm)
library(dplyr)
attach(mtcars)
by_cyl <- group_by(mtcars, cyl)
library(dplyr)
x=mtcars
by_cyl <- group_by(mtcars, cyl)
library(dplyr);library(tidyverse)
install.packages("dplyr")
library(dplyr);library(tidyverse)
attach(mtcars)
x=mtcars
by_cyl <- group_by(mtcars, cyl)
summarise_if(mydata, is.factor, funs(nlevels(.)))
attach(mtcars)
mydata=mtcars
by_cyl <- group_by(mtcars, cyl)
summarise_if(mydata, is.factor, funs(nlevels(.)))
mydata
summarise_if(mydata, is.factor, funs(nlevels(.)))
split(mtcars,mtcars$cyl)
models <- mtcars %>%
split(mtcars$cyl) %>%
map(~ lm(mpg ~ wt, data = .))
models %>%
map(summary)
models %>%
map(summary) %>%
map_dbl("r.squared")
